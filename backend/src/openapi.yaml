openapi: 3.0.1
info:
  title: SBTree API
  description: This is SBTree api server.
  contact:
    email: sb.ukma@gmail.com
  version: 1.0.0
servers:
  - url: //127.0.0.1/api
tags:
  - name: person
    description: Person API
  - name: event
    description: Event API
  - name: activity
    description: Activity API
  - name: auth
    description: Auth API
paths:
  /person:
    get:
      tags:
        - person
      summary: Gets all users with specified params
      operationId: controllers.person_controller.get_all
      parameters:
        - in: query
          name: params
          schema:
            type: array
            items:
              type: string
          required: false
          description: Select unique values of params (SELECT DISTINCT params FROM Person)
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
          required: false
          description: Sort by column
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search value (full name)
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number (default 1)
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
    post:
      tags:
        - person
      summary: Creates new person
      operationId: controllers.person_controller.create_person
      security:
        - adminAuth: [ ]
      requestBody:
        description: Person data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
  /person/filter:
    post:
      tags:
        - person
      summary: Get all filtered people
      operationId: controllers.person_controller.get_all_filtered
      requestBody:
        description: Request data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
  /person/tree:
    get:
      tags:
        - person
      summary: Get tree data
      operationId: controllers.person_controller.get_tree
      responses:
        200:
          description: Success
  /person/{id}/short:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: "#components/schemas/uuid"
        description: Person id
    get:
      tags:
        - person
      summary: Get person info without personal data
      operationId: controllers.person_controller.get_person_short
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
  /person/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: "#components/schemas/uuid"
        description: Person id
    get:
      tags:
        - person
      summary: Get person info
      operationId: controllers.person_controller.get_person
      security:
        - personalAuth: [ ]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
    put:
      tags:
        - person
      summary: Update person
      operationId: controllers.person_controller.update_person
      security:
        - adminAuth: [ ]
      requestBody:
        description: Request data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
    delete:
      tags:
        - person
      summary: Delete person
      operationId: controllers.person_controller.delete_person
      security:
        - adminAuth: [ ]
      responses:
        200:
          description: Success
  /event:
    get:
      tags:
        - event
      summary: Gets all events with specified params
      operationId: controllers.event_controller.get_all
      parameters:
        - in: query
          name: params
          schema:
            type: array
            items:
              type: string
          required: false
          description: Select unique values of params (SELECT DISTINCT params FROM Event)
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
          required: false
          description: Sort by column
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search value (name)
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number (default 1)
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
    post:
      tags:
        - event
      summary: Creates new event
      operationId: controllers.event_controller.create_event
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
  /event/filter:
    post:
      tags:
        - event
      summary: Get filtered list of events
      operationId: controllers.event_controller.get_all_filtered
      requestBody:
        description: Request data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
  /event/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: "#components/schemas/uuid"
        description: Event id
    get:
      tags:
        - event
      summary: Get event
      operationId: controllers.event_controller.get_event
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
    put:
      tags:
        - event
      summary: Update event
      operationId: controllers.event_controller.update_event
      security:
        - editorAuth: [ ]
      requestBody:
        description: Request data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
    delete:
      tags:
        - activity
      summary: Delete event
      operationId: controllers.event_controller.delete_event
      security:
        - adminAuth: [ ]
      responses:
        200:
          description: Success
  /activity:
    post:
      tags:
        - activity
      summary: Create new activity
      operationId: controllers.activity_controller.create_connection
      security:
        - adminAuth: [ ]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
  /activity/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: "#components/schemas/uuid"
        description: Relationship id
    get:
      tags:
        - activity
      summary: Get activity
      operationId: controllers.activity_controller.get_activity
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
    put:
      tags:
        - activity
      summary: Update activity
      operationId: controllers.activity_controller.update_connection
      security:
        - editorAuth: [ ]
      requestBody:
        description: Request data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activity"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
    delete:
      tags:
        - activity
      summary: Delete activity
      operationId: controllers.activity_controller.delete_connection
      security:
        - adminAuth: [ ]
      responses:
        200:
          description: Success
  /auth/user:
    get:
      tags:
        - auth
      summary: Get current user info
      operationId: controllers.auth_controller.get_current_user
      security:
        - personalAuth: [ ]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logs user out the system
      operationId: controllers.auth_controller.logout
      responses:
        200:
          description: Success
          content: { }
      security:
        - personalAuth: [ ]
  /auth/login:
    get:
      tags:
        - auth
      summary: Logs user into the system
      operationId: controllers.auth_controller.login
      security: [ ]
      responses:
        302:
          description: Redirect to login
          content: { }
  /auth/login/callback:
    get:
      tags:
        - auth
      summary: Return access token
      security: [ ]
      operationId: controllers.auth_controller.callback
      responses:
        200:
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
components:
  schemas:
    BaseEntity:
      type: object
      properties:
        id:
          $ref: "#components/schemas/uuid"
        createdAt:
          description: "format: dd.mm.yyyy hh:mm:ss"
          type: string
        updatedAt:
          description: "format: dd.mm.yyyy hh:mm:ss"
          type: string
    Login:
      type: object
      properties:
        token:
          type: string
        auth:
          $ref: "#components/schemas/Auth"
    Auth:
      allOf:
        - $ref: "#components/schemas/BaseEntity"
        - type: object
          properties:
            personId:
              $ref: "#components/schemas/uuid"
            access:
              type: integer
            email:
              type: string
            avatar:
              type: string
    Person:
      allOf:
        - $ref: "#components/schemas/BaseEntity"
        - type: object
          properties:
            name:
              type: string
            surname:
              type: string
            parental:
              type: string
            status:
              type: string
            faculty:
              type: string
            specialty:
              type: string
            dateIn:
              description: "format: dd.mm.yyyy"
              type: string
            dateOut:
              description: "format: dd.mm.yyyy"
              type: string
            about:
              type: string
            avatar:
              type: string
            parentId:
              $ref: "#components/schemas/uuid"
            events:
              type: array
              items:
                $ref: "#components/schemas/Event"
            email:
              type: string
              format: email
            telephone:
              type: string
              format: telephone
            dateBirth:
              description: "format: dd.mm.yyyy"
              type: string
    Event:
      allOf:
        - $ref: "#components/schemas/BaseEntity"
        - type: object
          properties:
            name:
              type: string
            dateStart:
              description: "format: dd.mm.yyyy"
              type: string
            dateEnd:
              description: "format: dd.mm.yyyy"
              type: string
            category:
              type: string
            about:
              type: string
            description:
              type: string
            photo:
              type: string
            people:
              type: array
              items:
                $ref: "#components/schemas/Person"
    Activity:
      allOf:
        - $ref: "#components/schemas/BaseEntity"
        - type: object
          properties:
            personId:
              $ref: "#components/schemas/uuid"
            eventId:
              $ref: "#components/schemas/uuid"
            position:
              type: string
            contribution:
              type: string
    FilterRequest:
      type: object
      properties:
        page:
          type: number
        sort:
          type: array
          items:
            type: string
        filters:
          type: object
        search:
          type: string
        pageSize:
          type: number
    Error:
      type: object
      properties:
        title:
          type: string
        status:
          type: integer
        details:
          type: string
    uuid:
      type: string
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      minLength: 36
      maxLength: 36
  securitySchemes:
    personalAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: controllers.auth_controller.auth_personal
    editorAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: controllers.auth_controller.auth_editor
    adminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: controllers.auth_controller.auth_admin
